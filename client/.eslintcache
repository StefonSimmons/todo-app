[{"/Users/stefonsimmons/general_assembly/SEI/Garnet/todo_app/client/src/App.js":"1"},{"size":5347,"mtime":1607719089655,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"fiqpm8","/Users/stefonsimmons/general_assembly/SEI/Garnet/todo_app/client/src/App.js",["7","8"],"import { useEffect, useState } from 'react'\nimport { Route, Link, useHistory } from 'react-router-dom'\nimport axios from 'axios'\n\nimport { todoBaseURL, usersBaseURL, config } from './services/index'\nimport { api } from './services/apiConfig'\n\nimport { gifs } from './data/gifImages'\n\nimport './App.css'\n\nimport TodoList from './components/TodoList'\nimport TodoDetails from './components/TodoDetails'\nimport AddTodo from './components/AddTodo'\nimport User from './components/User'\n\n\nfunction App() {\n\n  const [gif, setGif] = useState('')\n  const [todos, updateTodos] = useState([])\n  const [refresh, triggerRefresh] = useState(false)\n  const [registrationCred, setRegCred] = useState({\n    email: '',\n    username: '',\n    password: ''\n  })\n  const [currentUser, setCurrUser] = useState({})\n  const history = useHistory()\n\n  // GET REQUEST\n  const getToDoData = async () => {\n    console.log('2: ', currentUser)\n    const email = currentUser.fields && currentUser.fields.email\n    console.log('2b: ', email)\n    const res = await axios.get(`${todoBaseURL}?filterByFormula=FIND(%22${email}%22%2C+%7Bemail%7D)`, config)\n    updateTodos(res.data.records)\n    console.log('2c: ', res)\n  }\n\n  // POST REQUEST - Todo\n  const postToDoData = async (formData) => {\n    console.log(formData)\n    await axios.post(todoBaseURL, { fields: formData }, config)\n    triggerRefresh(!refresh)\n  }\n\n  // DELETE REQUEST \n  const deleteToDoItem = async (itemID) => {\n    await axios.delete(`${todoBaseURL}/${itemID}`, config)\n  }\n\n  // PUT REQUEST\n  const updateToDoItem = async (itemID, fields) => {\n    await axios.put(`${todoBaseURL}/${itemID}`, { fields }, config)\n\n  }\n\n  // POST REQUEST - Password Digest & \n  // POST REQUEST - User Registration\n  const register = async () => {\n    const res = await api.post('/users', { registrationCred })\n    const password_digest = res.data.password_digest\n    localStorage.setItem('token', res.data.token)\n\n    const fields = {\n      email: registrationCred.email,\n      username: registrationCred.username,\n      password: password_digest\n    }\n    const resp = await axios.post(usersBaseURL, { fields }, config)\n\n    setCurrUser(resp.data)\n    triggerRefresh(!refresh)\n    history.push('/add-todo')\n  }\n\n  // GET REQUEST - Find One User &\n  // POST REQUEST - User Login\n  const login = async (loginCred) => {\n\n    const email = loginCred.email\n    // gets user data from the email\n    const res = await axios.get(`${usersBaseURL}?filterByFormula=FIND(%22${email}%22%2C+%7Bemail%7D)`, config)\n    const user = res.data.records[0]\n    const password_digest = user.fields.password\n\n    const loginAuth = {\n      email,\n      password: loginCred.password,\n      password_digest\n    }\n    // verifies the password typed in is the same as the password_digest\n    const resp = await api.post('/sign-in', { loginAuth })\n\n    if (resp.data.user) {\n      localStorage.setItem('token', resp.data.token)\n      setCurrUser(user)\n      triggerRefresh(!refresh)\n      history.push('/')\n    }\n  }\n\n  // GET REQUEST - Verify User (Auth) //\n  //needed so that when we \n  const verifyUser = async () => {\n    const token = localStorage.getItem('token')\n\n    if (token) {\n      const header = {\n        headers: { 'Authorization': `Bearer ${token}` }\n      }\n      // verifies decoded token from localStorage \n      // is the same as user email who signed-in / registered\n      const res = await api.get('/verify', header)\n      const email = res.data\n\n      // gets user data from the email signature\n      const resp = await axios.get(`${usersBaseURL}?filterByFormula=FIND(%22${email}%22%2C+%7Bemail%7D)`, config)\n      const user = resp.data.records[0]\n\n      setCurrUser(user)\n      triggerRefresh(!refresh)\n    }\n  }\n\n  // LOGOUT\n  const logout = () => {\n    localStorage.removeItem('token')\n    setCurrUser({})\n    triggerRefresh(!refresh)\n  }\n\n\n  useEffect(() => {\n    getToDoData()\n  }, [refresh])\n\n\n  useEffect(() => {\n    verifyUser()\n  }, [])\n\n  return (\n    <div>\n      <nav className=\"nav-container\">\n        {currentUser.fields ?\n          <>\n            <h3>Hi, {currentUser.fields.username}!</h3>\n            <Link to='/'>List</Link>\n            <Link to=\"/add-todo\">New Item</Link>\n            <Link to=\"/register-login\" onClick={logout}>Logout</Link>\n          </>\n          :\n          <Link to=\"/register-login\">Register / Login</Link>\n        }\n      </nav>\n      <Route exact path=\"/\">\n        <TodoList\n          currentUser={currentUser}\n          todos={todos}\n          deleteToDoItem={deleteToDoItem}\n          triggerRefresh={triggerRefresh}\n          refresh={refresh}\n          gif={gif}\n          setGif={setGif}\n          gifs={gifs}\n        />\n      </Route>\n\n      <Route path=\"/items/:itemID\">\n        <TodoDetails\n          currentUser={currentUser}\n          todos={todos}\n          updateToDoItem={updateToDoItem}\n          triggerRefresh={triggerRefresh}\n          refresh={refresh}\n        />\n      </Route>\n\n      <Route path=\"/add-todo\">\n        <AddTodo\n          currentUser={currentUser}\n          postToDoData={postToDoData}\n        />\n      </Route>\n\n      <Route path=\"/register-login\">\n        <User\n          login={login}\n          register={register}\n          formData={registrationCred}\n          setFormData={setRegCred}\n        />\n      </Route>\n\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"9","severity":1,"message":"10","line":137,"column":6,"nodeType":"11","endLine":137,"endColumn":15,"suggestions":"12"},{"ruleId":"9","severity":1,"message":"13","line":142,"column":6,"nodeType":"11","endLine":142,"endColumn":8,"suggestions":"14"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getToDoData'. Either include it or remove the dependency array.","ArrayExpression",["15"],"React Hook useEffect has a missing dependency: 'verifyUser'. Either include it or remove the dependency array.",["16"],{"desc":"17","fix":"18"},{"desc":"19","fix":"20"},"Update the dependencies array to be: [getToDoData, refresh]",{"range":"21","text":"22"},"Update the dependencies array to be: [verifyUser]",{"range":"23","text":"24"},[3900,3909],"[getToDoData, refresh]",[3955,3957],"[verifyUser]"]